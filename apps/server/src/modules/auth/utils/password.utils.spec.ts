import { checkPasswordsMatch, hashPassword } from './password.utils';

describe('[Auth] Password utils', () => {
  describe('hashPassword', () => {
    it('returns hash for given password', async () => {
      const hashedPassword1 = await hashPassword('12345');
      const hashedPassword2 = await hashPassword('qwerty123');

      expect(hashedPassword1).toHaveLength(hashedPassword2.length);
    });

    it("ensures hashes for identical passwords aren't the same", async () => {
      const password = 'Password123!';

      const hashedPassword1 = await hashPassword(password);
      const hashedPassword2 = await hashPassword(password);

      expect(hashedPassword1).not.toBe(hashedPassword2);
    });
  });

  describe('checkPasswordsMatch', () => {
    it('returns true when provided password equals one generated by the `hashPassword` function', async () => {
      const password = 'abc123';
      const hashedPassword = await hashPassword(password);

      const doesPasswordsMatch = await checkPasswordsMatch(hashedPassword, password);

      expect(doesPasswordsMatch).toBe(true);
    });

    it('returns false when provided password is different than one generated by the `hashPassword` function', async () => {
      const password = 'abc123';
      const hashedPassword = await hashPassword(password);

      const doesPasswordsMatch = await checkPasswordsMatch(hashedPassword, `${password} `);

      expect(doesPasswordsMatch).toBe(false);
    });
  });
});
